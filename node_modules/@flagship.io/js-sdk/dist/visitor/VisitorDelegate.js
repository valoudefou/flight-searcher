import { VisitorAbstract } from './VisitorAbstract';
import { FSFlag } from '../flag/FsFlags';
import { logWarningSprintf, visitorFlagSyncStatusMessage } from '../utils/utils';
import { GET_FLAG } from '../enum/FlagshipConstant';
import { FSFetchStatus } from '../enum/FSFetchStatus';
import { FSFlagCollection } from '../flag/FSFlagCollection';
export class VisitorDelegate extends VisitorAbstract {
    updateContext(context, value) {
        this.getStrategy().updateContext(context, value);
        this.loadPredefinedContext();
    }
    clearContext() {
        this.getStrategy().clearContext();
    }
    getFlag(key) {
        if (this.fetchStatus.status !== FSFetchStatus.FETCHED && this.fetchStatus.status !== FSFetchStatus.FETCHING) {
            logWarningSprintf(this.config, GET_FLAG, visitorFlagSyncStatusMessage(this.fetchStatus.reason), this.visitorId, key);
        }
        return new FSFlag({ key, visitor: this });
    }
    getFlags() {
        return new FSFlagCollection({ visitor: this });
    }
    sendHit(hit) {
        return this.getStrategy().sendHit(hit);
    }
    sendHits(hits) {
        return this.getStrategy().sendHits(hits);
    }
    authenticate(visitorId) {
        this.getStrategy().authenticate(visitorId);
        this.updateCache();
    }
    unauthenticate() {
        this.getStrategy().unauthenticate();
        this.updateCache();
    }
    async fetchFlags() {
        await this.getStrategy().lookupVisitor();
        await this.getStrategy().fetchFlags();
        await this.getStrategy().cacheVisitor();
    }
    visitorExposed(param) {
        return this.getStrategy().visitorExposed(param);
    }
    getFlagValue(param) {
        return this.getStrategy().getFlagValue(param);
    }
    getFlagMetadata(param) {
        return this.getStrategy().getFlagMetadata(param);
    }
}
