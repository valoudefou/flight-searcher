import { HitAbstract } from '../hit/index';
import { primitive, IHit, FlagDTO, IFSFlagMetadata, CampaignDTO } from '../types';
import { StrategyAbstract } from './StrategyAbstract';
import { VisitorDelegate } from './index';
import { GetFlagMetadataParam, GetFlagValueParam, VisitorExposedParam } from '../type.local';
export declare const TYPE_HIT_REQUIRED_ERROR = "property type is required and must ";
export declare const HIT_NULL_ERROR = "Hit must not be null";
export declare class DefaultStrategy extends StrategyAbstract {
    private checkPredefinedContext;
    private updateContextKeyValue;
    updateContext(key: string, value: primitive): void;
    updateContext(context: Record<string, primitive>): void;
    clearContext(): void;
    protected fetchVisitorCampaigns(visitor: VisitorDelegate): CampaignDTO[] | null;
    private isDeDuplicated;
    protected sendActivate(flagDto: FlagDTO, defaultValue?: unknown): Promise<void>;
    sendHit(hit: HitAbstract): Promise<void>;
    sendHit(hit: IHit): Promise<void>;
    sendHits(hits: HitAbstract[]): Promise<void>;
    sendHits(hits: IHit[]): Promise<void>;
    private getHit;
    private prepareAndSendHit;
    authenticate(visitorId: string): void;
    unauthenticate(): void;
    fetchFlags(): Promise<void>;
    visitorExposed(param: VisitorExposedParam): Promise<void>;
    private sendFlagTroubleshooting;
    getFlagValue<T>(param: GetFlagValueParam<T>): T extends null ? unknown : T;
    private SendFlagMetadataTroubleshooting;
    getFlagMetadata(param: GetFlagMetadataParam): IFSFlagMetadata;
}
