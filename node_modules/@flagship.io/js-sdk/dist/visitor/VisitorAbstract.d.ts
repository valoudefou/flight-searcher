/// <reference types="node" />
/// <reference types="node" />
import { IConfigManager, IFlagshipConfig } from '../config/index';
import { IHit, NewVisitor, primitive, VisitorCacheDTO, FlagDTO, IFSFlagMetadata, sdkInitialData, VisitorCacheStatus, FetchFlagsStatus, SerializedFlagMetadata, CampaignDTO, VisitorVariations } from '../types';
import { IVisitor } from './IVisitor';
import { FSSdkStatus } from '../enum/index';
import { HitAbstract } from '../hit/index';
import { StrategyAbstract } from './StrategyAbstract';
import { EventEmitter } from '../depsNode.native';
import { Troubleshooting } from '../hit/Troubleshooting';
import { IFSFlag } from '../flag/IFSFlag';
import { GetFlagMetadataParam, GetFlagValueParam, VisitorExposedParam } from '../type.local';
import { IFSFlagCollection } from '../flag/IFSFlagCollection';
export declare abstract class VisitorAbstract extends EventEmitter implements IVisitor {
    protected _visitorId: string;
    protected _context: Record<string, primitive>;
    protected _flags: Map<string, FlagDTO>;
    protected _configManager: IConfigManager;
    protected _campaigns: CampaignDTO[];
    protected _hasConsented: boolean;
    protected _anonymousId: string | null;
    deDuplicationCache: Record<string, number>;
    protected _isCleaningDeDuplicationCache: boolean;
    visitorCache?: VisitorCacheDTO;
    protected _exposedVariations: Record<string, VisitorVariations>;
    protected _sendExposedVariationTimeoutId?: NodeJS.Timeout;
    private _instanceId;
    private _traffic;
    protected _sdkInitialData?: sdkInitialData;
    private _consentHitTroubleshooting?;
    private _segmentHitTroubleshooting?;
    private _fetchStatus;
    private _onFetchFlagsStatusChanged?;
    private _getCampaignsPromise?;
    get getCampaignsPromise(): Promise<CampaignDTO[] | null> | undefined;
    set getCampaignsPromise(v: Promise<CampaignDTO[] | null> | undefined);
    get onFetchFlagsStatusChanged(): (({ status, reason }: FetchFlagsStatus) => void) | undefined;
    set onFetchFlagsStatusChanged(v: (({ status, reason }: FetchFlagsStatus) => void) | undefined);
    get fetchStatus(): FetchFlagsStatus;
    set fetchStatus(v: FetchFlagsStatus);
    get segmentHitTroubleshooting(): Troubleshooting | undefined;
    set segmentHitTroubleshooting(v: Troubleshooting | undefined);
    get consentHitTroubleshooting(): Troubleshooting | undefined;
    set consentHitTroubleshooting(v: Troubleshooting | undefined);
    get sdkInitialData(): sdkInitialData | undefined;
    static SdkStatus?: FSSdkStatus;
    getSdkStatus(): FSSdkStatus | undefined;
    lastFetchFlagsTimestamp: number;
    private _visitorCacheStatus?;
    get visitorCacheStatus(): VisitorCacheStatus | undefined;
    set visitorCacheStatus(v: VisitorCacheStatus | undefined);
    constructor(param: NewVisitor & {
        visitorId?: string;
        configManager: IConfigManager;
        context: Record<string, primitive>;
        monitoringData?: sdkInitialData;
    });
    get traffic(): number;
    set traffic(v: number);
    get instanceId(): string;
    protected generateVisitorId(): string;
    clearDeDuplicationCache(deDuplicationTime: number): void;
    protected setInitialFlags(flags?: SerializedFlagMetadata[]): void;
    protected setInitializeCampaigns(campaigns?: CampaignDTO[], hasInitialFlags?: boolean): void;
    protected updateCache(): void;
    loadPredefinedContext(): void;
    get visitorId(): string;
    set visitorId(v: string);
    get hasConsented(): boolean;
    set hasConsented(v: boolean);
    setConsent(hasConsented: boolean): void;
    get context(): Record<string, primitive>;
    set context(v: Record<string, primitive>);
    get flagsData(): Map<string, FlagDTO>;
    set flagsData(v: Map<string, FlagDTO>);
    get configManager(): IConfigManager;
    get config(): IFlagshipConfig;
    get campaigns(): CampaignDTO[];
    set campaigns(v: CampaignDTO[]);
    get anonymousId(): string | null;
    set anonymousId(v: string | null);
    protected getStrategy(): StrategyAbstract;
    sendExposedVariation(flag?: FlagDTO): void;
    abstract updateContext(key: string, value: primitive): void;
    abstract updateContext(context: Record<string, primitive>): void;
    abstract updateContext(context: Record<string, primitive> | string, value?: primitive): void;
    abstract clearContext(): void;
    abstract getFlag(key: string): IFSFlag;
    abstract getFlags(): IFSFlagCollection;
    abstract sendHit(hit: HitAbstract): Promise<void>;
    abstract sendHit(hit: IHit): Promise<void>;
    abstract sendHit(hit: IHit | HitAbstract): Promise<void>;
    abstract sendHits(hit: HitAbstract[]): Promise<void>;
    abstract sendHits(hit: IHit[]): Promise<void>;
    abstract sendHits(hit: HitAbstract[] | IHit[]): Promise<void>;
    abstract authenticate(visitorId: string): void;
    abstract unauthenticate(): void;
    abstract visitorExposed(param: VisitorExposedParam): Promise<void>;
    abstract getFlagValue<T>(param: GetFlagValueParam<T>): T extends null ? unknown : T;
    abstract fetchFlags(): Promise<void>;
    abstract getFlagMetadata(param: GetFlagMetadataParam): IFSFlagMetadata;
}
