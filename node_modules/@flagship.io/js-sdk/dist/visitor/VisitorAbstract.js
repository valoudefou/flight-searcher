import { PREDEFINED_CONTEXT_LOADED, PROCESS_NEW_VISITOR, VISITOR_CREATED, VISITOR_ID_GENERATED, VISITOR_PROFILE_LOADED } from './../enum/FlagshipConstant';
import { FSSdkStatus, SDK_INFO, VISITOR_ID_ERROR } from '../enum/index';
import { hexToValue, isBrowser, logDebugSprintf, logError, uuidV4 } from '../utils/utils';
import { DefaultStrategy } from './DefaultStrategy';
import { EventEmitter } from '../depsNode.native';
import { NotReadyStrategy } from './NotReadyStrategy';
import { PanicStrategy } from './PanicStrategy';
import { NoConsentStrategy } from './NoConsentStrategy';
import { cacheVisitor } from './VisitorCache';
import { MurmurHash } from '../utils/MurmurHash';
import { FSFetchStatus } from '../enum/FSFetchStatus';
import { FSFetchReasons } from '../enum/FSFetchReasons';
import { sendVisitorExposedVariations } from '../qaAssistant/messages/index';
export class VisitorAbstract extends EventEmitter {
    _visitorId;
    _context;
    _flags;
    _configManager;
    _campaigns;
    _hasConsented;
    _anonymousId;
    deDuplicationCache;
    _isCleaningDeDuplicationCache;
    visitorCache;
    _exposedVariations;
    _sendExposedVariationTimeoutId;
    _instanceId;
    _traffic;
    _sdkInitialData;
    _consentHitTroubleshooting;
    _segmentHitTroubleshooting;
    _fetchStatus;
    _onFetchFlagsStatusChanged;
    _getCampaignsPromise;
    get getCampaignsPromise() {
        return this._getCampaignsPromise;
    }
    set getCampaignsPromise(v) {
        this._getCampaignsPromise = v;
    }
    get onFetchFlagsStatusChanged() {
        return this._onFetchFlagsStatusChanged;
    }
    set onFetchFlagsStatusChanged(v) {
        this._onFetchFlagsStatusChanged = v;
    }
    get fetchStatus() {
        return this._fetchStatus;
    }
    set fetchStatus(v) {
        this._fetchStatus = v;
        if (this.onFetchFlagsStatusChanged) {
            this.onFetchFlagsStatusChanged(v);
        }
    }
    get segmentHitTroubleshooting() {
        return this._segmentHitTroubleshooting;
    }
    set segmentHitTroubleshooting(v) {
        this._segmentHitTroubleshooting = v;
    }
    get consentHitTroubleshooting() {
        return this._consentHitTroubleshooting;
    }
    set consentHitTroubleshooting(v) {
        this._consentHitTroubleshooting = v;
    }
    get sdkInitialData() {
        return this._sdkInitialData;
    }
    static SdkStatus;
    getSdkStatus() {
        return VisitorAbstract.SdkStatus;
    }
    lastFetchFlagsTimestamp = 0;
    _visitorCacheStatus;
    get visitorCacheStatus() {
        return this._visitorCacheStatus;
    }
    set visitorCacheStatus(v) {
        this._visitorCacheStatus = v;
    }
    constructor(param) {
        const { visitorId, configManager, context, isAuthenticated, hasConsented, initialFlagsData, initialCampaigns, monitoringData, onFetchFlagsStatusChanged } = param;
        super();
        this._exposedVariations = {};
        this._sdkInitialData = monitoringData;
        this._instanceId = uuidV4();
        this._isCleaningDeDuplicationCache = false;
        this.deDuplicationCache = {};
        this._context = {};
        this._configManager = configManager;
        const visitorCache = this.config.reuseVisitorIds ? cacheVisitor.loadVisitorProfile() : null;
        if (visitorCache) {
            logDebugSprintf(this.config, PROCESS_NEW_VISITOR, VISITOR_PROFILE_LOADED, visitorCache);
        }
        this.visitorId = visitorId || (!isAuthenticated && visitorCache?.anonymousId ? visitorCache?.anonymousId : visitorCache?.visitorId) || this.generateVisitorId();
        this.campaigns = [];
        this._anonymousId = null;
        if (isAuthenticated) {
            this._anonymousId = visitorCache?.anonymousId || uuidV4();
        }
        this.setConsent(hasConsented || false);
        this.updateContext(context);
        this.loadPredefinedContext();
        logDebugSprintf(this.config, PROCESS_NEW_VISITOR, PREDEFINED_CONTEXT_LOADED, {
            fs_client: SDK_INFO.name,
            fs_version: SDK_INFO.version,
            fs_users: this.visitorId
        });
        this.updateCache();
        this.setInitialFlags(initialFlagsData);
        this.setInitializeCampaigns(initialCampaigns, !!initialFlagsData);
        this.onFetchFlagsStatusChanged = onFetchFlagsStatusChanged;
        this.fetchStatus = {
            status: FSFetchStatus.FETCH_REQUIRED,
            reason: FSFetchReasons.VISITOR_CREATED
        };
        logDebugSprintf(this.config, PROCESS_NEW_VISITOR, VISITOR_CREATED, this.visitorId, this.context, !!isAuthenticated, !!this.hasConsented);
    }
    get traffic() {
        return this._traffic;
    }
    set traffic(v) {
        this._traffic = v;
    }
    get instanceId() {
        return this._instanceId;
    }
    generateVisitorId() {
        const visitorId = uuidV4();
        logDebugSprintf(this.config, PROCESS_NEW_VISITOR, VISITOR_ID_GENERATED, visitorId);
        return visitorId;
    }
    clearDeDuplicationCache(deDuplicationTime) {
        if (this._isCleaningDeDuplicationCache) {
            return;
        }
        this._isCleaningDeDuplicationCache = true;
        const entries = Object.entries(this.deDuplicationCache);
        for (const [key, value] of entries) {
            if ((Date.now() - value) > (deDuplicationTime * 1000)) {
                delete this.deDuplicationCache[key];
            }
        }
        this._isCleaningDeDuplicationCache = false;
    }
    setInitialFlags(flags) {
        this._flags = new Map();
        if (!Array.isArray(flags)) {
            return;
        }
        flags.forEach((item) => {
            this._flags.set(item.key, {
                key: item.key,
                campaignId: item.campaignId,
                campaignName: item.campaignName,
                variationGroupId: item.variationGroupId,
                variationGroupName: item.variationGroupName,
                variationId: item.variationId,
                variationName: item.variationName,
                isReference: item.isReference,
                value: hexToValue(item.hex, this.config)?.v,
                slug: item.slug,
                campaignType: item.campaignType
            });
        });
    }
    setInitializeCampaigns(campaigns, hasInitialFlags) {
        if (campaigns && Array.isArray(campaigns) && !hasInitialFlags) {
            this.getStrategy().updateCampaigns(campaigns);
        }
    }
    updateCache() {
        const visitorProfile = {
            visitorId: this.visitorId,
            anonymousId: this.anonymousId
        };
        cacheVisitor.saveVisitorProfile(visitorProfile);
    }
    loadPredefinedContext() {
        this.context.fs_client = SDK_INFO.name;
        this.context.fs_version = SDK_INFO.version;
        this.context.fs_users = this.visitorId;
    }
    get visitorId() {
        return this._visitorId;
    }
    set visitorId(v) {
        if (!v || typeof v !== 'string') {
            logError(this.config, VISITOR_ID_ERROR, 'VISITOR ID');
            return;
        }
        this._visitorId = v;
        this.loadPredefinedContext();
        this.visitorCache = undefined;
    }
    get hasConsented() {
        return this._hasConsented;
    }
    set hasConsented(v) {
        this._hasConsented = v;
    }
    setConsent(hasConsented) {
        this.hasConsented = hasConsented;
        this.getStrategy().setConsent(hasConsented);
    }
    get context() {
        return this._context;
    }
    set context(v) {
        this._context = {};
        this.updateContext(v);
    }
    get flagsData() {
        return this._flags;
    }
    set flagsData(v) {
        this._flags = v;
    }
    get configManager() {
        return this._configManager;
    }
    get config() {
        return this.configManager.config;
    }
    get campaigns() {
        return this._campaigns;
    }
    set campaigns(v) {
        this._campaigns = v;
    }
    get anonymousId() {
        return this._anonymousId;
    }
    set anonymousId(v) {
        this._anonymousId = v;
    }
    getStrategy() {
        let strategy;
        const params = {
            visitor: this,
            murmurHash: new MurmurHash()
        };
        const status = this.getSdkStatus();
        if (status === undefined || status === FSSdkStatus.SDK_NOT_INITIALIZED) {
            strategy = new NotReadyStrategy(params);
        }
        else if (status === FSSdkStatus.SDK_PANIC) {
            strategy = new PanicStrategy(params);
        }
        else if (!this.hasConsented) {
            strategy = new NoConsentStrategy(params);
        }
        else {
            strategy = new DefaultStrategy(params);
        }
        return strategy;
    }
    sendExposedVariation(flag) {
        if (!flag || !isBrowser()) {
            return;
        }
        this._exposedVariations[flag.campaignId] = {
            campaignId: flag.campaignId,
            variationGroupId: flag.variationGroupId,
            variationId: flag.variationId
        };
        window.flagship = {
            ...window.flagship,
            exposedVariations: this._exposedVariations
        };
        if (!this.config.isQAModeEnabled) {
            return;
        }
        const BATCH_SIZE = 10;
        const DELAY = 100;
        if (Object.keys(this._exposedVariations).length >= BATCH_SIZE) {
            sendVisitorExposedVariations(this._exposedVariations);
            this._exposedVariations = {};
        }
        if (this._sendExposedVariationTimeoutId) {
            clearTimeout(this._sendExposedVariationTimeoutId);
        }
        if (Object.keys(this._exposedVariations).length === 0) {
            return;
        }
        this._sendExposedVariationTimeoutId = setTimeout(() => {
            sendVisitorExposedVariations(this._exposedVariations);
            this._exposedVariations = {};
        }, DELAY);
    }
}
