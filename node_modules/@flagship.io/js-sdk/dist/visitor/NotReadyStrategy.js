import { FSSdkStatus, FLAG_VISITOR_EXPOSED, METHOD_DEACTIVATED_ERROR, FLAG_METADATA, METADATA_SDK_NOT_READY } from '../enum/index';
import { logErrorSprintf } from '../utils/utils';
import { DefaultStrategy } from './DefaultStrategy';
import { FSFlagMetadata } from '../flag/FSFlagMetadata';
export class NotReadyStrategy extends DefaultStrategy {
    async lookupHits() {
        //
    }
    async lookupVisitor() {
        //
    }
    async cacheVisitor() {
        //
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async sendHit(_hit) {
        this.log('sendHit');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async sendHits(_hits) {
        this.log('sendHits');
    }
    async fetchFlags() {
        this.log('fetchFlags');
    }
    getFlagValue(param) {
        this.log('Flag.value');
        return param.defaultValue;
    }
    async visitorExposed() {
        this.log(FLAG_VISITOR_EXPOSED);
    }
    getFlagMetadata(param) {
        const emptyMetaData = FSFlagMetadata.Empty();
        logErrorSprintf(this.config, FLAG_METADATA, METADATA_SDK_NOT_READY, this.visitor.visitorId, param.key, emptyMetaData);
        return emptyMetaData;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async sendActivate(_flagDto, _defaultValue) {
        //
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async sendTroubleshootingHit(_hit) {
        //
    }
    async sendSdkConfigAnalyticHit() {
        //
    }
    log(methodName) {
        logErrorSprintf(this.config, methodName, METHOD_DEACTIVATED_ERROR, this.visitor.visitorId, methodName, FSSdkStatus[FSSdkStatus.SDK_NOT_INITIALIZED]);
    }
}
