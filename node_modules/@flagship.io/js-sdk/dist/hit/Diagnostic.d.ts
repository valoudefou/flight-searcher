import { IFlagshipConfig } from '../config/index';
import { CacheStrategy, FSSdkStatus, LogLevel } from '../enum/index';
import { HitAbstract, IHitAbstract } from './HitAbstract';
import { BucketingDTO } from '../decision/api/bucketingDTO';
import { FlagDTO, SerializedFlagMetadata, TroubleshootingLabel, primitive } from '../types';
import { CampaignDTO } from '../mod';
import { BatchTriggeredBy } from '../enum/BatchTriggeredBy';
export declare const ERROR_MESSAGE = "event category and event action are required";
export interface IDiagnostic extends IHitAbstract {
    version?: string;
    logLevel: LogLevel;
    accountId?: string;
    envId?: string;
    timestamp?: string;
    timeZone?: string;
    label: TroubleshootingLabel;
    lastInitializationTimestamp?: string;
    lastBucketingTimestamp?: string;
    stackType?: string;
    stackName?: string;
    stackVersion?: string;
    stackOriginName?: string;
    stackOriginVersion?: string;
    sdkStatus?: FSSdkStatus;
    sdkConfigMode?: string;
    sdkConfigLogLevel?: LogLevel;
    sdkConfigCustomLogManager?: boolean;
    sdkConfigCustomCacheManager?: boolean;
    sdkConfigStatusListener?: boolean;
    sdkConfigTimeout?: number;
    sdkConfigPollingInterval?: number;
    sdkConfigFetchNow?: boolean;
    sdkConfigReuseVisitorIds?: boolean;
    sdkConfigInitialBucketing?: BucketingDTO;
    sdkConfigDecisionApiUrl?: string;
    sdkConfigHitDeduplicationTime?: number;
    sdkConfigTrackingManagerStrategy?: CacheStrategy;
    sdkConfigTrackingManagerBatchIntervals?: number;
    sdkConfigTrackingManagerPoolMaxSize?: number;
    sdkBucketingFile?: BucketingDTO;
    sdkConfigUsingCustomHitCache?: boolean;
    sdkConfigUsingCustomVisitorCache?: boolean;
    sdkConfigUsingOnVisitorExposed?: boolean;
    sdkConfigFetchThirdPartyData?: boolean;
    sdkConfigFetchFlagsBufferingTime?: number;
    sdkConfigNextFetchConfig?: Record<string, unknown>;
    sdkConfigDisableDeveloperUsageTracking?: boolean;
    sdkConfigDisableCache?: boolean;
    httpRequestUrl?: string;
    httpRequestMethod?: string;
    httpRequestHeaders?: Record<string, unknown>;
    httpRequestBody?: unknown;
    httpResponseUrl?: string;
    httpResponseMethod?: string;
    httpResponseHeaders?: Record<string, unknown>;
    httpResponseCode?: number;
    httpResponseBody?: unknown;
    httpResponseTime?: number;
    visitorStatus?: string;
    visitorInstanceType?: string;
    visitorContext?: Record<string, primitive>;
    visitorConsent?: boolean;
    visitorAssignmentHistory?: Record<string, string>;
    visitorFlags?: Map<string, FlagDTO>;
    visitorCampaigns?: CampaignDTO[] | null;
    visitorCampaignFromCache?: CampaignDTO[] | null;
    visitorIsAuthenticated?: boolean;
    visitorInitialCampaigns?: CampaignDTO[];
    visitorInitialFlagsData?: SerializedFlagMetadata[];
    contextKey?: string;
    contextValue?: unknown;
    flagKey?: string;
    flagValue?: string;
    flagDefault?: unknown;
    visitorExposed?: boolean;
    flagMetadataCampaignId?: string;
    flagMetadataCampaignName?: string;
    flagMetadataVariationGroupId?: string;
    flagMetadataVariationGroupName?: string;
    flagMetadataVariationId?: string;
    flagMetadataVariationName?: string;
    flagMetadataCampaignSlug?: string | null;
    flagMetadataCampaignType?: string;
    flagMetadataCampaignIsReference?: boolean;
    hitContent?: Record<string, unknown>;
    batchTriggeredBy?: BatchTriggeredBy;
    visitorSessionId?: string;
    traffic?: number;
    flagshipInstanceId?: string;
}
/**
 * Represents a diagnostic hit.
 */
export declare abstract class Diagnostic extends HitAbstract implements IDiagnostic {
    private _logVersion?;
    private _logLevel;
    private _accountId?;
    private _envId?;
    private _timestamp?;
    private _label;
    private _stackType?;
    private _stackName?;
    private _stackVersion?;
    private _stackOriginName?;
    private _stackOriginVersion?;
    private _sdkStatus?;
    private _sdkConfigMode?;
    private _sdkConfigCustomLogManager?;
    private _sdkConfigCustomCacheManager?;
    private _sdkConfigStatusListener?;
    private _sdkConfigTimeout?;
    private _sdkConfigPollingTime?;
    private _sdkConfigTrackingManagerConfigStrategy?;
    private _sdkConfigTrackingManagerConfigBatchIntervals?;
    private _sdkConfigTrackingManagerConfigBatchLength?;
    private _httpRequestUrl?;
    private _httpRequestMethod?;
    private _httpRequestHeaders?;
    private _httpRequestBody?;
    private _httpResponseUrl?;
    private _httpResponseMethod?;
    private _httpResponseHeaders?;
    private _httpResponseBody?;
    private _visitorStatus?;
    private _visitorInstanceType?;
    private _visitorContext?;
    private _visitorConsent?;
    private _visitorAssignmentHistory?;
    private _visitorFlags?;
    private _visitorIsAuthenticated?;
    private _flagKey?;
    private _flagValue?;
    private _flagDefault?;
    private _flagMetadataCampaignId?;
    private _flagMetadataVariationGroupId?;
    private _flagMetadataVariationId?;
    private _flagMetadataCampaignSlug?;
    private _flagMetadataCampaignType?;
    private _sdkConfigFetchNow?;
    private _sdkConfigReuseVisitorIds?;
    private _sdkConfigInitialBucketing?;
    private _sdkConfigDecisionApiUrl?;
    private _sdkConfigHitDeduplicationTime?;
    private _visitorInitialCampaigns?;
    private _visitorInitialFlagsData?;
    private _visitorCampaign?;
    private _httRequestTime?;
    private _hitContent?;
    private _httpInstanceId?;
    private _lastInitializationTimestamp?;
    private _lastBucketingTimestamp?;
    private _batchTriggeredBy?;
    private _visitorCampaignFromCache?;
    private _timeZone?;
    private _flagMetadataCampaignIsReference;
    private _contextKey?;
    private _contextValue?;
    private _sdkBucketingFile?;
    private _flagMetadataCampaignName?;
    private _flagMetadataVariationGroupName?;
    private _flagMetadataVariationName?;
    private _sdkConfigUsingCustomHitCache?;
    private _sdkConfigUsingCustomVisitorCache?;
    private _sdkConfigUsingOnVisitorExposed?;
    private _sdkConfigFetchThirdPartyData?;
    private _sdkConfigFetchFlagsBufferingTime?;
    private _sdkConfigNextFetchConfig?;
    private _sdkConfigDisableDeveloperUsageTracking?;
    private _sdkConfigDisableCache?;
    private _sdkConfigLogLevel?;
    get sdkConfigLogLevel(): LogLevel | undefined;
    set sdkConfigLogLevel(v: LogLevel | undefined);
    private _visitorSessionId?;
    private _traffic?;
    private _flagshipInstanceId?;
    get traffic(): number | undefined;
    set traffic(v: number | undefined);
    get flagshipInstanceId(): string | undefined;
    set flagshipInstanceId(v: string | undefined);
    get visitorSessionId(): string | undefined;
    set visitorSessionId(v: string | undefined);
    get sdkConfigDisableCache(): boolean | undefined;
    set sdkConfigDisableCache(v: boolean | undefined);
    get sdkConfigDisableDeveloperUsageTracking(): boolean | undefined;
    set sdkConfigDisableDeveloperUsageTracking(v: boolean | undefined);
    get sdkConfigNextFetchConfig(): Record<string, unknown> | undefined;
    set sdkConfigNextFetchConfig(v: Record<string, unknown> | undefined);
    get sdkConfigFetchFlagsBufferingTime(): number | undefined;
    set sdkConfigFetchFlagsBufferingTime(v: number | undefined);
    get sdkConfigFetchThirdPartyData(): boolean | undefined;
    set sdkConfigFetchThirdPartyData(v: boolean | undefined);
    get sdkConfigUsingOnVisitorExposed(): boolean | undefined;
    set sdkConfigUsingOnVisitorExposed(v: boolean | undefined);
    get sdkConfigUsingCustomVisitorCache(): boolean | undefined;
    set sdkConfigUsingCustomVisitorCache(v: boolean | undefined);
    get sdkConfigUsingCustomHitCache(): boolean | undefined;
    set sdkConfigUsingCustomHitCache(v: boolean | undefined);
    get flagMetadataVariationName(): string | undefined;
    set flagMetadataVariationName(v: string | undefined);
    get flagMetadataVariationGroupName(): string | undefined;
    set flagMetadataVariationGroupName(v: string | undefined);
    get flagMetadataCampaignName(): string | undefined;
    set flagMetadataCampaignName(v: string | undefined);
    get sdkBucketingFile(): BucketingDTO | undefined;
    set sdkBucketingFile(v: BucketingDTO | undefined);
    get contextValue(): unknown | undefined;
    set contextValue(v: unknown | undefined);
    get contextKey(): string | undefined;
    set contextKey(v: string | undefined);
    get flagMetadataCampaignIsReference(): boolean | undefined;
    set flagMetadataCampaignIsReference(v: boolean | undefined);
    get timeZone(): string | undefined;
    set timeZone(v: string | undefined);
    get visitorCampaignFromCache(): CampaignDTO[] | null | undefined;
    set visitorCampaignFromCache(v: CampaignDTO[] | null | undefined);
    get batchTriggeredBy(): BatchTriggeredBy | undefined;
    set batchTriggeredBy(v: BatchTriggeredBy | undefined);
    get lastBucketingTimestamp(): string | undefined;
    set lastBucketingTimestamp(v: string | undefined);
    get lastInitializationTimestamp(): string | undefined;
    set lastInitializationTimestamp(v: string | undefined);
    get hitContent(): Record<string, unknown> | undefined;
    set hitContent(v: Record<string, unknown> | undefined);
    get httpResponseTime(): number | undefined;
    set httpResponseTime(v: number | undefined);
    get visitorCampaigns(): CampaignDTO[] | null | undefined;
    set visitorCampaigns(v: CampaignDTO[] | null | undefined);
    get visitorInitialFlagsData(): SerializedFlagMetadata[] | undefined;
    set visitorInitialFlagsData(v: SerializedFlagMetadata[] | undefined);
    get visitorInitialCampaigns(): CampaignDTO[] | undefined;
    set visitorInitialCampaigns(v: CampaignDTO[] | undefined);
    get sdkConfigHitDeduplicationTime(): number | undefined;
    set sdkConfigHitDeduplicationTime(v: number | undefined);
    get sdkConfigDecisionApiUrl(): string | undefined;
    set sdkConfigDecisionApiUrl(v: string | undefined);
    get sdkConfigInitialBucketing(): BucketingDTO | undefined;
    set sdkConfigInitialBucketing(v: BucketingDTO | undefined);
    get sdkConfigReuseVisitorIds(): boolean | undefined;
    set sdkConfigReuseVisitorIds(v: boolean | undefined);
    get sdkConfigFetchNow(): boolean | undefined;
    set sdkConfigFetchNow(v: boolean | undefined);
    get flagMetadataCampaignType(): string | undefined;
    set flagMetadataCampaignType(v: string | undefined);
    get flagMetadataCampaignSlug(): string | null | undefined;
    set flagMetadataCampaignSlug(v: string | null | undefined);
    get flagMetadataVariationId(): string | undefined;
    set flagMetadataVariationId(v: string | undefined);
    get flagMetadataVariationGroupId(): string | undefined;
    set flagMetadataVariationGroupId(v: string | undefined);
    get flagMetadataCampaignId(): string | undefined;
    set flagMetadataCampaignId(v: string | undefined);
    get flagDefault(): unknown | undefined;
    set flagDefault(v: unknown | undefined);
    get flagValue(): string | undefined;
    set flagValue(v: string | undefined);
    get flagKey(): string | undefined;
    set flagKey(v: string | undefined);
    get visitorIsAuthenticated(): boolean | undefined;
    set visitorIsAuthenticated(v: boolean | undefined);
    get visitorFlags(): Map<string, FlagDTO> | undefined;
    set visitorFlags(v: Map<string, FlagDTO> | undefined);
    get visitorAssignmentHistory(): Record<string, string> | undefined;
    set visitorAssignmentHistory(v: Record<string, string> | undefined);
    get visitorConsent(): boolean | undefined;
    set visitorConsent(v: boolean | undefined);
    get visitorContext(): Record<string, primitive> | undefined;
    set visitorContext(v: Record<string, primitive> | undefined);
    get visitorInstanceType(): string | undefined;
    set visitorInstanceType(v: string | undefined);
    get visitorStatus(): string | undefined;
    set visitorStatus(v: string | undefined);
    get httpResponseBody(): unknown | undefined;
    set httpResponseBody(v: unknown | undefined);
    private _httpResponseCode?;
    get httpResponseCode(): number | undefined;
    set httpResponseCode(v: number | undefined);
    get httpResponseHeaders(): Record<string, unknown> | undefined;
    set httpResponseHeaders(v: Record<string, unknown> | undefined);
    get httpResponseMethod(): string | undefined;
    set httpResponseMethod(v: string | undefined);
    get httpResponseUrl(): string | undefined;
    set httpResponseUrl(v: string | undefined);
    get httpRequestBody(): unknown | undefined;
    set httpRequestBody(v: unknown | undefined);
    get httpRequestHeaders(): Record<string, unknown> | undefined;
    set httpRequestHeaders(v: Record<string, unknown> | undefined);
    get httpRequestMethod(): string | undefined;
    set httpRequestMethod(v: string | undefined);
    get httpRequestUrl(): string | undefined;
    set httpRequestUrl(v: string | undefined);
    get sdkConfigTrackingManagerPoolMaxSize(): number | undefined;
    set sdkConfigTrackingManagerPoolMaxSize(v: number | undefined);
    get sdkConfigTrackingManagerBatchIntervals(): number | undefined;
    set sdkConfigTrackingManagerBatchIntervals(v: number | undefined);
    get sdkConfigTrackingManagerStrategy(): CacheStrategy | undefined;
    set sdkConfigTrackingManagerStrategy(v: CacheStrategy | undefined);
    get sdkConfigPollingInterval(): number | undefined;
    set sdkConfigPollingInterval(v: number | undefined);
    get sdkConfigTimeout(): number | undefined;
    set sdkConfigTimeout(v: number | undefined);
    get sdkConfigStatusListener(): boolean | undefined;
    set sdkConfigStatusListener(v: boolean | undefined);
    get sdkConfigCustomCacheManager(): boolean | undefined;
    set sdkConfigCustomCacheManager(v: boolean | undefined);
    get sdkConfigCustomLogManager(): boolean | undefined;
    set sdkConfigCustomLogManager(v: boolean | undefined);
    get sdkConfigMode(): string | undefined;
    set sdkConfigMode(v: string | undefined);
    get sdkStatus(): FSSdkStatus | undefined;
    set sdkStatus(v: FSSdkStatus | undefined);
    get stackOriginVersion(): string | undefined;
    set stackOriginVersion(v: string | undefined);
    get stackOriginName(): string | undefined;
    set stackOriginName(v: string | undefined);
    get stackVersion(): string | undefined;
    set stackVersion(v: string | undefined);
    get stackName(): string | undefined;
    set stackName(v: string | undefined);
    get stackType(): string | undefined;
    set stackType(v: string | undefined);
    get label(): TroubleshootingLabel;
    set label(v: TroubleshootingLabel);
    get timestamp(): string | undefined;
    set timestamp(v: string | undefined);
    get envId(): string | undefined;
    set envId(v: string | undefined);
    get accountId(): string | undefined;
    set accountId(v: string | undefined);
    get logLevel(): LogLevel;
    set logLevel(v: LogLevel);
    get version(): string | undefined;
    set version(v: string | undefined);
    constructor(param: Omit<IDiagnostic & {
        config: IFlagshipConfig;
    }, 'createdAt' | 'category'>);
    /**
     * Gets the timezone of the user.
     * @returns The timezone as a string. If the timezone cannot be determined, it returns the offset from UTC in hours.
     */
    getTimezone(): string;
    toApiKeys(): any;
    isReady(checkParent?: boolean): boolean;
    getErrorMessage(): string;
}
