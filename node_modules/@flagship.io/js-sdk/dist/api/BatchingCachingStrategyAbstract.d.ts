import { IFlagshipConfig } from '../config/index';
import { BatchTriggeredBy } from '../enum/BatchTriggeredBy';
import { Activate } from '../hit/Activate';
import { UsageHit } from '../hit/UsageHit';
import { Troubleshooting } from '../hit/Troubleshooting';
import { HitAbstract } from '../hit/index';
import { TroubleshootingData } from '../types';
import { IHttpClient } from '../utils/HttpClient';
import { ITrackingManagerCommon } from './ITrackingManagerCommon';
import type { BatchingCachingStrategyConstruct, SendActivate } from './types';
export declare abstract class BatchingCachingStrategyAbstract implements ITrackingManagerCommon {
    protected _config: IFlagshipConfig;
    protected _hitsPoolQueue: Map<string, HitAbstract>;
    protected _activatePoolQueue: Map<string, Activate>;
    protected _httpClient: IHttpClient;
    protected _troubleshootingQueue: Map<string, Troubleshooting>;
    protected _usageHitQueue: Map<string, UsageHit>;
    protected _flagshipInstanceId?: string;
    protected _isUsageHitQueueSending: boolean;
    protected _isTroubleshootingQueueSending: boolean;
    private _HitsToFsQa;
    private _sendFsHitToQATimeoutId?;
    private _troubleshootingData?;
    get flagshipInstanceId(): string | undefined;
    get troubleshootingData(): TroubleshootingData | undefined;
    set troubleshootingData(v: TroubleshootingData | undefined);
    get config(): IFlagshipConfig;
    constructor(param: BatchingCachingStrategyConstruct);
    sendHitsToFsQa(hits: HitAbstract[]): void;
    abstract addHitInPoolQueue(hit: HitAbstract): Promise<void>;
    protected abstract sendActivate({ activateHitsPool, currentActivate, batchTriggeredBy }: SendActivate): Promise<void>;
    addHit(hit: HitAbstract): Promise<void>;
    activateFlag(hit: Activate): Promise<void>;
    protected activateFlagEdgeMode(hit: Activate): Promise<void>;
    protected onVisitorExposed(activate: Activate): void;
    sendBatch(batchTriggeredBy?: BatchTriggeredBy): Promise<void>;
    notConsent(visitorId: string): Promise<void>;
    protected cacheHit(hits: Map<string, HitAbstract>): Promise<void>;
    flushHits(hitKeys: string[]): Promise<void>;
    flushAllHits(): Promise<void>;
    protected isTroubleshootingActivated(): boolean;
    addTroubleshootingHit(hit: Troubleshooting): Promise<void>;
    sendTroubleshootingHit(hit: Troubleshooting): Promise<void>;
    sendTroubleshootingQueue(): Promise<void>;
    protected addUsageHit(hit: UsageHit): Promise<void>;
    sendUsageHit(hit: UsageHit): Promise<void>;
    sendUsageHitQueue(): Promise<void>;
}
