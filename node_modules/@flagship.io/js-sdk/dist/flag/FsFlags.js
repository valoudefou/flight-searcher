import { FSFetchStatus } from '../enum/FSFetchStatus';
import { FSFlagStatus } from '../enum/FSFlagStatus';
import { FSFlagMetadata } from './FSFlagMetadata';
import { forceVariation } from './forceVariation';
export class FSFlag {
    _visitor;
    _key;
    _defaultValue;
    hasGetValueBeenCalled = false;
    constructor(param) {
        const { key, visitor } = param;
        this._key = key;
        this._visitor = visitor;
    }
    exists() {
        if (!this._visitor) {
            return false;
        }
        const flagDTO = this._visitor?.flagsData.get(this._key);
        const forcedFlagDTO = forceVariation({ flagDTO, config: this._visitor.config });
        const flag = forcedFlagDTO || flagDTO;
        return !!(flag?.campaignId && flag?.variationId && flag?.variationGroupId);
    }
    get metadata() {
        if (!this._visitor) {
            return FSFlagMetadata.Empty();
        }
        const flagDTO = this._visitor.flagsData.get(this._key);
        const forcedFlagDTO = forceVariation({ flagDTO, config: this._visitor.config });
        return this._visitor.getFlagMetadata({
            key: this._key,
            flag: forcedFlagDTO || flagDTO
        });
    }
    async visitorExposed() {
        if (!this._visitor) {
            return;
        }
        const flagDTO = this._visitor.flagsData.get(this._key);
        const forcedFlagDTO = forceVariation({ flagDTO, config: this._visitor.config });
        return this._visitor.visitorExposed({
            key: this._key,
            flag: forcedFlagDTO || flagDTO,
            defaultValue: this._defaultValue,
            hasGetValueBeenCalled: this.hasGetValueBeenCalled
        });
    }
    getValue(defaultValue, visitorExposed = true) {
        this._defaultValue = defaultValue;
        this.hasGetValueBeenCalled = true;
        if (!this._visitor) {
            return defaultValue;
        }
        const flagDTO = this._visitor.flagsData.get(this._key);
        const forcedFlagDTO = forceVariation({ flagDTO, config: this._visitor.config });
        const flag = forcedFlagDTO || flagDTO;
        this._visitor.sendExposedVariation(flag);
        return this._visitor.getFlagValue({
            key: this._key,
            defaultValue,
            flag,
            visitorExposed
        });
    }
    get status() {
        if (this._visitor?.fetchStatus?.status === FSFetchStatus.PANIC) {
            return FSFlagStatus.PANIC;
        }
        if (!this.exists()) {
            return FSFlagStatus.NOT_FOUND;
        }
        if (this._visitor?.fetchStatus?.status === FSFetchStatus.FETCH_REQUIRED || this._visitor?.fetchStatus?.status === FSFetchStatus.FETCHING) {
            return FSFlagStatus.FETCH_REQUIRED;
        }
        return FSFlagStatus.FETCHED;
    }
}
