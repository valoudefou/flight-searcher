import { type IFlagshipConfig } from '../config/IFlagshipConfig';
import { FSFetchReasons } from '../enum/FSFetchReasons';
/**
 * Return a formatted string
 */
export declare function sprintf(format: string, ...value: any[]): string;
export declare function logErrorSprintf(config: IFlagshipConfig, tag: string, message: string, ...arg: unknown[]): void;
export declare function logError(config: IFlagshipConfig, message: string, tag: string): void;
export declare function logWarningSprintf(config: IFlagshipConfig, tag: string, message: string, ...arg: unknown[]): void;
export declare function logWarning(config: IFlagshipConfig, message: string, tag: string): void;
export declare function logInfoSprintf(config: IFlagshipConfig, tag: string, message: string, ...arg: unknown[]): void;
export declare function logInfo(config: IFlagshipConfig, message: string, tag: string): void;
export declare function logDebugSprintf(config: IFlagshipConfig, tag: string, message: string, ...arg: unknown[]): void;
export declare function logDebug(config: IFlagshipConfig, message: string, tag: string): void;
export declare function sleep(ms: number): Promise<unknown>;
export declare function isBrowser(): boolean;
export declare function hasSameType(flagValue: unknown, defaultValue: unknown): boolean;
export declare function uuidV4(): string;
export declare function errorFormat(message: string, errorData?: Record<string, unknown>): string;
export declare function visitorFlagSyncStatusMessage(reason: FSFetchReasons): string;
export declare function valueToHex(value: {
    v: unknown;
}): string;
export declare function hexToValue(hex: string, config: IFlagshipConfig): {
    v: unknown;
} | null;
