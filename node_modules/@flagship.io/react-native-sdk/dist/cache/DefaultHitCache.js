var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import AsyncStorage from '@react-native-async-storage/async-storage';
export const FS_HIT_PREFIX = 'FS_DEFAULT_HIT_CACHE_';
export class DefaultHitCache {
    cacheHit(hits) {
        return __awaiter(this, void 0, void 0, function* () {
            const localDatabaseJson = (yield AsyncStorage.getItem(FS_HIT_PREFIX)) || '{}';
            const localDatabase = JSON.parse(localDatabaseJson);
            const newLocalDatabase = Object.assign(Object.assign({}, localDatabase), hits);
            yield AsyncStorage.setItem(FS_HIT_PREFIX, JSON.stringify(newLocalDatabase));
        });
    }
    lookupHits() {
        return __awaiter(this, void 0, void 0, function* () {
            const localDatabaseJson = (yield AsyncStorage.getItem(FS_HIT_PREFIX)) || '{}';
            return JSON.parse(localDatabaseJson);
        });
    }
    flushHits(hitKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            const localDatabaseJson = (yield AsyncStorage.getItem(FS_HIT_PREFIX)) || '{}';
            const localDatabase = JSON.parse(localDatabaseJson);
            hitKeys.forEach(key => {
                delete localDatabase[key];
            });
            yield AsyncStorage.setItem(FS_HIT_PREFIX, JSON.stringify(localDatabase));
        });
    }
    flushAllHits() {
        return __awaiter(this, void 0, void 0, function* () {
            yield AsyncStorage.removeItem(FS_HIT_PREFIX);
        });
    }
}
