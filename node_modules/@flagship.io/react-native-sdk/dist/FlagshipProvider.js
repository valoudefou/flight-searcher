var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { FlagshipProvider as ReactFlagshipProvider, Flagship, OS_NAME, OS_VERSION_CODE, CacheStrategy, } from '@flagship.io/react-sdk';
import React, { useEffect, useState } from 'react';
import { DefaultHitCache } from './cache/DefaultHitCache';
import { DefaultVisitorCache } from './cache/DefaultVisitorCache';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import { version as SDK_VERSION } from './sdkVersion';
export const DEFAULT_TIME_INTERVAL = 5;
export const DEFAULT_POOL_MAX_SIZE = 10;
// Predefined context keys 
export const SDK_FIRST_TIME_INIT = "sdk_firstTimeInit";
export const FlagshipProvider = (_a) => {
    var { children, visitorCacheImplementation, hitCacheImplementation, visitorData } = _a, props = __rest(_a, ["children", "visitorCacheImplementation", "hitCacheImplementation", "visitorData"]);
    const [newVisitorData, setNewVisitorData] = useState(visitorData);
    useEffect(() => {
        function loadPredefinedContext() {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function* () {
                let firstTimeInit = null;
                try {
                    firstTimeInit = yield AsyncStorage.getItem(SDK_FIRST_TIME_INIT);
                }
                catch (error) {
                    (_b = (_a = Flagship.getConfig()) === null || _a === void 0 ? void 0 : _a.logManager) === null || _b === void 0 ? void 0 : _b.error("Error on get item from AsyncStorage", "loadPredefinedContext");
                }
                setNewVisitorData(Object.assign(Object.assign({}, visitorData), { id: (_c = Flagship.getVisitor()) === null || _c === void 0 ? void 0 : _c.visitorId, context: Object.assign(Object.assign({}, visitorData === null || visitorData === void 0 ? void 0 : visitorData.context), { [OS_NAME]: Platform.OS, [OS_VERSION_CODE]: (_d = Platform.Version) === null || _d === void 0 ? void 0 : _d.toString(), [SDK_FIRST_TIME_INIT]: !firstTimeInit }) }));
                AsyncStorage.setItem(SDK_FIRST_TIME_INIT, SDK_FIRST_TIME_INIT);
            });
        }
        if (visitorData) {
            loadPredefinedContext();
        }
    }, [JSON.stringify(visitorData)]);
    return (React.createElement(ReactFlagshipProvider, Object.assign({}, props, { trackingManagerConfig: props.trackingManagerConfig || {
            poolMaxSize: DEFAULT_POOL_MAX_SIZE,
            batchIntervals: DEFAULT_TIME_INTERVAL,
            cacheStrategy: CacheStrategy.CONTINUOUS_CACHING
        }, sdkVersion: SDK_VERSION, language: 2, visitorCacheImplementation: visitorCacheImplementation || new DefaultVisitorCache(), hitCacheImplementation: hitCacheImplementation || new DefaultHitCache(), visitorData: newVisitorData }),
        React.createElement(React.Fragment, null, children)));
};
