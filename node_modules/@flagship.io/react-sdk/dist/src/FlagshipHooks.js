'use client';
import { useContext } from 'react';
import { Flagship, FSFlagCollection } from '@flagship.io/js-sdk';
import { noVisitorMessage } from './constants';
import { FlagshipContext } from './FlagshipContext';
import { FSFlag } from './FSFlag';
import { deepClone, hasContextChanged, logError, logWarn } from './utils';
/**
 * This hook returns a flag object by its key. If no flag match the given key an empty flag will be returned.
 * @param key
 * @param defaultValue
 * @returns
 */
export const useFsFlag = (key) => {
    const { state } = useContext(FlagshipContext);
    const { visitor } = state;
    if (!visitor) {
        return new FSFlag(key, state);
    }
    return visitor.getFlag(key);
};
const handleContextChange = (param) => {
    const { updateFunction, functionName, visitor, config } = param;
    if (!visitor) {
        logError(config, noVisitorMessage, functionName);
        return;
    }
    const originalContextClone = deepClone(visitor.context);
    updateFunction();
    const updatedContext = visitor.context;
    if (hasContextChanged(originalContextClone, updatedContext)) {
        visitor.fetchFlags();
    }
};
export const useFlagship = () => {
    const { state } = useContext(FlagshipContext);
    const { visitor, config } = state;
    const fsUpdateContext = (context) => {
        handleContextChange({
            config,
            visitor,
            updateFunction: () => visitor?.updateContext(context),
            functionName: 'updateContext'
        });
    };
    const fsClearContext = () => {
        handleContextChange({
            config,
            visitor,
            updateFunction: () => visitor?.clearContext(),
            functionName: 'cleanContext'
        });
    };
    const fsAuthenticate = (visitorId) => {
        const functionName = 'authenticate';
        if (!visitor) {
            logError(config, noVisitorMessage, functionName);
            return;
        }
        const originalVisitorId = visitor.visitorId;
        visitor.authenticate(visitorId);
        if (originalVisitorId !== visitorId) {
            visitor.fetchFlags();
        }
    };
    const fsUnauthenticate = () => {
        const functionName = 'unauthenticate';
        if (!visitor) {
            logError(config, noVisitorMessage, functionName);
            return;
        }
        const originalVisitorId = visitor.visitorId;
        visitor.unauthenticate();
        if (originalVisitorId !== visitor.visitorId) {
            visitor.fetchFlags();
        }
    };
    /**
     * Send a Hit to Flagship servers for reporting.
     */
    const fsSendHit = (hit) => {
        const functionName = 'sendHit';
        if (!visitor) {
            logError(config, noVisitorMessage, functionName);
            return Promise.resolve();
        }
        if (Array.isArray(hit)) {
            return visitor.sendHits(hit);
        }
        return visitor.sendHit(hit);
    };
    function getFlag(key) {
        if (!visitor) {
            return new FSFlag(key, state);
        }
        return visitor.getFlag(key);
    }
    function fetchFlags() {
        if (!visitor) {
            logWarn(config, noVisitorMessage, 'fetchFlags');
            return Promise.resolve();
        }
        return visitor.fetchFlags();
    }
    function setConsent(hasConsented) {
        if (!visitor) {
            logWarn(config, noVisitorMessage, 'setConsent');
            return;
        }
        visitor.setConsent(hasConsented);
    }
    async function close() {
        await Flagship.close();
    }
    function getFlags() {
        if (!visitor) {
            const flags = new Map();
            state.flags?.forEach((flag, key) => {
                flags.set(key, new FSFlag(key, state));
            });
            return new FSFlagCollection({ flags });
        }
        return visitor.getFlags();
    }
    return {
        visitorId: visitor?.visitorId,
        anonymousId: visitor?.anonymousId,
        context: { ...visitor?.context },
        hasConsented: visitor?.hasConsented,
        sdkStatus: Flagship.getStatus(),
        fetchStatus: visitor?.fetchStatus,
        setConsent,
        updateContext: fsUpdateContext,
        clearContext: fsClearContext,
        authenticate: fsAuthenticate,
        unauthenticate: fsUnauthenticate,
        sendHits: fsSendHit,
        getFlag,
        fetchFlags,
        close,
        getFlags
    };
};
